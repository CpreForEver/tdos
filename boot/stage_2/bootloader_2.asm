; copyright
; file: bootloader_1.asm
; description: init point for tdos bootloader

USE16
ORG 0x1000

; helpful macros
INCLUDE '../inc/macros.mac'
INCLUDE '../inc/common.inc'

BOOTINFO = 0xA000
TMP_BUFFER = 0xC000
; Stage 2 memory mapping
; 0x0700 - 0x07ff - Stack
; 0x1000 - 0x9fff - Stage 2 Code 
; 0xa000 - 0xafff - Boot Info
; 0xb000 - 0xbfff - kernel environment
; 0xc000 - 0xcfff - temp buffer
; 0xd000 - 0xdfff - Kernel environment

MAGIC:	DW 0xDEC0, 0x0000 ; 0xC0DE

START: 
	MOV AX, 0x1000
	MOV SP, AX
	MOV BP, AX
	XOR AX, AX
	MOV DS, AX
	MOV ES, AX
	CLD

	.START_MEM_MAP:
	PRINT MEMORY_MAPPING
	MOV dword EAX, BOOTINFO_MAGIC
	MOV dword [BOOTINFO.MAGIC], EAX
    	MOV dword [BOOTINFO.SIZE], 96
    	MOV dword [BOOTINFO.BOOTLOADER], BOOTLOADER_BIOS
    	XOR EAX, EAX
    	MOV dword [BOOTINFO.FB_PTR], EAX
    	MOV dword [BOOTINFO.FB_PTR + 4], EAX
    	MOV dword [BOOTINFO.FB_WIDTH], EAX
    	MOV dword [BOOTINFO.FB_HEIGHT], EAX
    	MOV dword [BOOTINFO.FB_SCANLINE], EAX
	MOV byte  [BOOTINFO.FB_PIXFORMAT], 0
    	MOV dword [BOOTINFO.ACPI_PTR], EAX
    	MOV dword [BOOTINFO.ACPI_PTR + 4], EAX
	MMAP:
	XOR EBX, EBX
	MOV word DI, BOOTINFO.MMAP

	.NEXT_MAP:
	MOV AX, 0E820h
    	MOV dword EDX, 0x534D4150
    	XOR ECX, ECX
    	MOV byte CL, 20
    	INT 15h
    	JC .NO_MMAP
    	CMP EAX, 0x534D4150
    	JNE .NO_MMAP
    	MOV AL, [DI + 16]
    	CMP AL, 1
    	JE .FREE
    	CMP AL, 3
    	JE .RECLAIMABLE
    	CMP AL, 4
    	JE .ACPI
    	MOV AL, MMAP_USED
    	JMP @f

	.FREE:
	MOV AL, MMAP_FREE
	JMP @f
	.RECLAIMABLE:
	MOV AL, MMAP_RECLAIM
	JMP @f
	.ACPI:
	MOV AL, MMAP_ACPI
	@@:
	MOV byte [DI], AL
	ADD [BOOTINFO.SIZE], 16
	ADD DI, 16
	CMP DI, BOOTINFO + MAX_BOOTINFO_SZ
	JAE @f
	OR EBX, EBX
	JNZ .NEXT_MAP
	@@:
	CMP [BOOTINFO.SIZE], 96
	JA .MMAP_END
	.NO_MMAP:
	MOV SI, PANIC_MESSAGE0
	JMP PANIC
	.MMAP_END:
	PRINT OK

	.START_VGA:
	PRINT START_VGA
	.FIND_VIDEO_MODE:
	XOR EAX, EAX
	MOV AX, 04F00h
	MOV DI, TMP_BUFFER
	MOV dword [DI], 'VBE2'
	INT 10h
	CMP AX, 004Fh
	JE .LOAD_MODE_PTRS
	.VBE_ERROR:
	MOV SI, PANIC_MESSAGE1
	JMP PANIC
	
	.LOAD_MODE_PTRS:
	XOR ESI, ESI
	XOR EDI, EDI
	MOV SI, word [TMP_BUFFER + 0Eh]
	MOV AX, word [TMP_BUFFER + 10h]
	MOV DS, AX
	XOR AX, AX
	MOV ES, AX
	MOV DI, TMP_BUFFER + 200h
	XOR BX, BX
	.READ_NEXT_PTR:
	LODSW
	CMP AX, 0FFFFh
	JE @f
	OR AX, AX
	JZ @f
	STOSW
	INC BX
	JMP .READ_NEXT_PTR
	@@:
	XOR AX, AX
	STOSW
	
	.LOOP_MODES:
	MOV SI, TMP_BUFFER + 200h
	.NEXT_MODE:
	MOV DI, TMP_BUFFER + 400h
	XOR EAX, EAX
	LODSW
	OR AX, AX
	JNZ @f
	.MODE_ERROR:
	MOV SI, PANIC_MESSAGE2
	JMP PANIC
	@@:
	MOV cx, AX
	MOV AX, 04F01h
	INT 10h
	CMP AX, 004Fh
	JNE .MODE_ERROR
	
	MOV AX, word [TMP_BUFFER + 400h + VBE_MODE_ATTRIB_OFFSET]
	VBE_MODEFLAGS = VBE_SUPPORTED + VBE_COLOR + VBE_GRAPHICS + VBE_LINEAR_FB
	and AX, VBE_MODEFLAGS
	CMP AX, VBE_MODEFLAGS
	JNE .NEXT_MODE
	CMP byte [TMP_BUFFER + 400h + VBE_MODE_MEMORY_MODEL_OFFSET], VBE_DIRECT_COLOR
	JNE .NEXT_MODE
	CMP byte [TMP_BUFFER + 400h + VBE_MODE_BPP_OFFSET], 32
	JNE .NEXT_MODE
	CMP word [TMP_BUFFER + 400h + VBE_MODE_WIDTH_OFFSET], REQUIRED_WIDTH
	jb .NEXT_MODE
	CMP word [TMP_BUFFER + 400h + VBE_MODE_HEIGHT_OFFSET], REQUIRED_HEIGHT
	jb .NEXT_MODE
	.FOUND_MATCH:
	XOR EDX, EDX
	XOR EBX, EBX
	XOR EAX, EAX
	MOV BX, word [TMP_BUFFER + 400h + VBE_MODE_SCANLINE_OFFSET]
	MOV word [BOOTINFO.FB_SCANLINE], BX
	MOV AX, word [TMP_BUFFER + 400h + VBE_MODE_WIDTH_OFFSET]
	MOV word [BOOTINFO.FB_WIDTH], AX
	MOV AX, word [TMP_BUFFER + 400h + VBE_MODE_HEIGHT_OFFSET]
	MOV word [BOOTINFO.FB_HEIGHT], AX
	MOV EAX, dword [TMP_BUFFER + 400h + VBE_MODE_FB_PHYSADDR_OFFSET]
	MOV dword [BOOTINFO.FB_PTR], EAX
	MOV byte [BOOTINFO.FB_PIXFORMAT], VBE_FB_ARGB
	CMP dword [TMP_BUFFER + 400h + VBE_MODE_BLUE_FIELD_SIZE_OFFSET], 0
	je .VIDEO_MODE_SELECTED
	MOV byte [BOOTINFO.FB_PIXFORMAT], VBE_FB_RGBA
	CMP dword [TMP_BUFFER + 400h + VBE_MODE_BLUE_FIELD_SIZE_OFFSET], 8
	je .VIDEO_MODE_SELECTED
	MOV byte [BOOTINFO.FB_PIXFORMAT], VBE_FB_ABGR
	CMP dword [TMP_BUFFER + 400h + VBE_MODE_BLUE_FIELD_SIZE_OFFSET], 16
	je .VIDEO_MODE_SELECTED
	MOV byte [BOOTINFO.FB_PIXFORMAT], VBE_FB_BGRA
	.VIDEO_MODE_SELECTED:
	
	.SET_VIDEO_MODE:
	MOV BX, CX
	BTS BX, 14
	MOV AX, 04F02h
	INT 10h
	CMP AX, 004Fh
	JE @f
	.SET_MODE_ERROR:
	MOV SI, PANIC_MESSAGE3
	JMP PANIC
	
	@@:
	CLI
	LGDT [GDT_DESCRIPTOR]
	MOV EAX, CR0
	OR  EAX, 1
	MOV CR0, EAX
	JMP 0x18:(.PROTECTED_START - $$ + 0x1000)
	PRINT OK

	USE32
	.PROTECTED_START:
	XOR EAX, EAX
	MOV AX, 0x20
	MOV DS, AX
	MOV ES, AX
	MOV FS, AX
	MOV GS, AX
	MOV SS, AX
	MOV ESP, 0x9000
	MOV EBP, 0x9000
	JMP 0x18:cmain
	
	.JUMP_TO_KERNEL:


FINISH:
	JMP FINISH

PANIC:
	PRINT PANIC_PREFIX
	PRINT SI
	PRINT NL
	XOR AX, AX
	INT 16h			; wait for keyboard interrupt
	JMP FAR 0FFFFh:0
	

INCLUDE '../inc/printer.inc'
INCLUDE '../inc/helpers.inc'

MEMORY_MAPPING: DB "Building the Memory Map ", 0x0
START_VGA: DB "Configuring VGA ", 0x0
ENTER_PROTECTED_MODE: DB "Entering Protected Mode ", 0x0
OK: DB "<OK>", 0xD, 0xA, 0x0
NL: DB 0xD, 0xA, 0x0

; PANIC Messages
PANIC_PREFIX:	DB	"PANIC: ", 0x0
PANIC_MESSAGE0:	DB	"-1", 0x0
PANIC_MESSAGE1:	DB	"-2", 0x0
PANIC_MESSAGE2:	DB	"-3", 0x0
PANIC_MESSAGE3:	DB	"-4", 0x0
PANIC_MESSAGE4:	DB	"-5", 0x0
PANIC_MESSAGE5:	DB	"-6", 0x0
PANIC_MESSAGE6:	DB	"-7", 0x0

REQUIRED_WIDTH = 800
REQUIRED_HEIGHT = 600

USE32
ALIGN 16

GDT_START:
NULLENTRY:
    DD 0x0      ; Limit [0..15]
    DD 0x0      ; Base [0..15]
REALCODE:
    DW 0xFFFF
    DW 0x0000
    DB 0x00
    DB 0x9A
    DB 0xCF
    DB 0x0
REALDATA:
    DW 0xFFFF
    DW 0x0000
    DB 0x00
    DB 0x92
    DB 0xCF
    DB 0x00
PROTCODE:
    DW 0xFFFF
    DW 0x0000
    DB 0x00
    DB 0x9A
    DB 0xCF
    DB 0x00
PROTDATA:
    DW 0xFFFF
    DW 0x0000
    DB 0x00
    DB 0x92
    DB 0xCF
    DB 0x00
GDT_END:

GDT_DESCRIPTOR:
    DW GDT_END - GDT_START - 1
    DD GDT_START

ALIGN 32
PADDING:	
	DQ	16	DUP 0xDEADC0DEDEADC0DE	 

cmain:
